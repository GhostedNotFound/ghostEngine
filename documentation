 Ver0.2.7

Hello, and thank you for choosing Ghost Engine!

Ghost Engine is managed by Ghost, at Ghost Only#7451.

Ghost Engine is incomplete and buggy, so keep that in mind!

This file is to document every function, variable, and method Ghost Engine uses/provides.

Some quick pointers before we start:
    - Any function starting with _ is used internally by the engine, and shouldn't be modified UNLESS you know what you are doing! (A different rule applies to variables.)

    - The engineAssets folder is also used internally by the engine, although if you don't screw up  code, you should be fine deleting it.

    - Any function starting with exp_ is an experimental function, and may be buggy.

    - This engine uses LOVE (obviously) as it's framework. Some LOVE functions are used by the engine. (such as love.draw)

    - This engine is moddable without having to touch the main.lua file. Make a folder called _books and put any lua file in it.

    - This engine is backwards-compatiable with older versions, and "books" can be used to be forwards-compatiable.

    - This build has the _books folder inserted by default (did you install open-source?) with the allExperimentalFunctions.lua file pre-installed.



Variables:

GhostEngine = Contains functions that Ghost Engine calls. Such as frame() and drawCustomTypes()
    .frame() = Called in every love.update() loop. Use global function to utilize it.
    .drawCustomTypes() = Use to make  own types that can be drawn. It is suggested that this is used in a book / mod

TICKS = Increment after every successful GhostEngine.frame().

_SCREENWIDTH = Width of the current window.

_SCREENHEIGHT = Height of the current window.

_SEED = The seed determined by the current time and a lot of math.
    math.ceil(((os.time() * math.random(-5, 5)) * os.time() / 1000000) - os.clock())

FontSize = Self-explanatory.

CurrentFont = Currently has no use.

Layers = Table that contains every user-generated and pre-generated Layer. Use [insert function here] instead to get a specific layer.



Functions:

Parameters for functions will be surrounded by (), and seperated with a comma.
Experimental functions (for this version, see top of file) begin with exp_
Internal functions are not listed.

RegenerateRandomness() = Changes the _SEED value based on the current time, and throws away the first 3 random numbers.
    No requirements.
    Returns nothing / nil.
    No example neccesary.

CreateNewLayer(l, merge) = Creates a new layer with name (l), if merge is true, any layer with the same name becomes this layer.
    Requirements:
        (l) = String, unique unless (merge) is true
    Returns nothing / nil.
    Example:
        CreateNewLayer("NewLayer") -- Creates a new layer named "NewLayer" in the Layers table
        CreateNewLayer("NewLayer", true) -- Merges the previously created layer with this layer.

file_exists(name) = Checks if (name) is a file, and returns true if... true.
    Requirements:
        (name) = String
    Returns:
        true (if file exists)
        false (if file doesn't exist or (name) is not a String)
    Example:
        file_exists("documentation") -- Returns true
        file_exists("notarealfile.apk") -- Returns false
    Notes:
        For some reason, doesn't entirely work on Windows. Further testing must be done to confirm.

CreateObject(layer, id, typeof, data) = Creates an Object in Layer (layer)
    Requirements:
        (layer) = String, must exist
        (id) = String, must be unique
        (typeof) = String, Must be "text", "image", "rect", or "circle"
        (data) = Table, 
            {x=0, y=0, t="text", i="path/to/image.png", clr={1,1,1,1}, mode="line", w=1, h=1, rad=10, seg=1}
    Returns:
        table containing the created Object's data (If successful).
        table containing error UI's data (If failure).
    Examples:
        See CreateUI() for similar examples.

CreateUI(id, typeof, data) = Creates a UIObject in the UILayer.
    Requirements:
        (id) = String, must be unique
        (typeof) = String, Must be "text", "image", "rect", or "circle"
        (data) = Table, 
            {x=0, y=0, t="text", i="path/to/image.png", clr={1,1,1,1}, mode="line", w=1, h=1, rad=10, seg=1}
    Returns:
        table containing the created UI's data (If successful).
        table containing error UI's data (If failure).
    Examples:
        local txt = CreateUI("msg", "text", {x=_SCREENWIDTH/2, y=_SCREENHEIGHT/2,t="Welcome to Ghost Engine for LOVE!"}) -- X and Y can be left blank, they will be filled in by the engine.
        local img = CreateUI("img", "image", {i="engineAssets/noImage.png"})
        local rect = CreateUI("rect", "rect", {mode="fill", w=10, h=10}) -- MODE can be left blank, it will be replaced with "line"
        local circle = CreateUI("circle", "circle", {rad=35, seg=20}) -- SEG can be left blank, it will be replaced with 50. The more segments, the laggier the game.
    Notes:
        If a UI fails to be created correctly, it will be replaced with an error text UI object detailing what went wrong.
        Most values for the data table can be left blank.
        data.mode must be "fill" or "line".

DestroyUI(id) = Destroys any UI with the name (id)
    Requirements:
        (id) = String, must be unique
    Returns nothing / nil.
    No example neccessary. (I hope.)

Common Issues & Internal Engine Errors:

Q: I got a warning about Windows being incompatiable!
A: Windows has trouble detecting if a file is in a directory as file_exists() doesn't work for some reason.
    Therefore, the game.lua file cannot be detected and may break some games that use file_exists().

Q: Random black squares and images keep appearing in the "main menu" / engineAssets folder!
A: A UI is being made for Ghost Engine, that will allow you to choose a file if none can be found,
    this will help counteract bugs relating to file_exists() on Windows, and will make Ghost Engine runnable by itself!

Q: Ghost Engine halted after adding a "book" in _books!
A: Check the "book" for issues in the code and/or remove it. If that doesn't resolve the problem, delete this copy of Ghost Engine and reinstall a new copy. It may also help to send a screenshot to support first.

Q: Will updates change names of functions, variables, etc?
A: No-ish. 99% of functions will only have their purpose changed. Experimental functions, however, can and will have name changes.
    If a game uses an old experimental function, download the allExp.lua book and place it in the _books directory, 
    assuming the name of the experimental function has changed. (you are open-source, this is already installed)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

E404: A game.lua file wasn't detected or couldn't be loaded via require (although its more likely you'll get a LOVE error or E403 if it couldn't be loaded).

E403: A game.lua file WAS detected, but couldn't be read. Is the file permission-locked or blank?

E000: Testing error. The _testingError variable is true on boot, or the error was generated via the simFakeError function.

E100:  system is incompatiable with Ghost Engine. We plan for OS X support, but any other platform, such as Android, will never have support. 
